/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.17).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.spring5app.animalclinic.rest.api.controllers;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.spring5app.animalclinic.rest.api.dto.model.ModelApiResponse;
import com.spring5app.animalclinic.rest.api.dto.model.OwnerDTO;

import java.util.List;

import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-01-19T22:53:48.929Z")

@Api(value = "ownersController", description = "the owners API")
@RequestMapping(value = "/animalclinic/api/v1", consumes = "application/json")
public interface OwnersApi {

    @ApiOperation(value = "Create owner", nickname = "createOwner", notes = "Create a new pet owner.", response = ModelApiResponse.class, tags={ "owner", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "operation response", response = ModelApiResponse.class) })
    @RequestMapping(value = "/owners",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<ModelApiResponse> createOwner(@ApiParam(value = "Created owner object" ,required=true )  @Valid @RequestBody OwnerDTO body);


    @ApiOperation(value = "Delete user", nickname = "deleteUser", notes = "This can only be done by the logged in user.", tags={ "owner", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "sucessful operation"),
        @ApiResponse(code = 400, message = "Invalid owner ID supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/owners/{Id}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUser(@ApiParam(value = "The name that needs to be deleted",required=true) @PathVariable("Id") String id);


    @ApiOperation(value = "Get owner by owner Id", nickname = "getOwnerById", notes = "", response = OwnerDTO.class, tags={ "owner", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = OwnerDTO.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Owner not found") })
    @RequestMapping(value = "/owners/{Id}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<OwnerDTO> getOwnerById(@ApiParam(value = "The name that needs to be fetched. Use user1 for testing.",required=true) @PathVariable("Id") String id);


    @ApiOperation(value = "List all owners", nickname = "getOwners", notes = "List all owners", response = OwnerDTO.class, responseContainer = "List", tags={ "owner", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = OwnerDTO.class, responseContainer = "List") })
    @RequestMapping(value = "/owners",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<OwnerDTO>> getOwners();

}
